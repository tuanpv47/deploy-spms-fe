{"version":3,"sources":["views/admin/CreateCTDT/CreateCTDT.js","views/admin/CreateCTDT/Step2.js","views/admin/CreateCTDT/Wrapper.js","components/common/AsteriskIcon/AsteriskIcon.js","components/admin/ConfirmModal/ConfirmModal.js","views/admin/FlowCreateCTDT/utils.js","views/admin/FlowCreateCTDT/component/EditableCell.js","views/admin/FlowCreateCTDT/component/styled.js","views/admin/FlowCreateCTDT/component/TablesSelection.js","views/admin/FlowCreateCTDT/component/SelectableCell.js","views/admin/FlowCreateCTDT/component/IndeterminateCheckbox.js","views/admin/FlowCreateCTDT/component/DisableEditCell.js","../node_modules/@emotion/memoize/dist/memoize.browser.esm.js","../node_modules/@emotion/unitless/dist/unitless.browser.esm.js","components/common/StepProgressBar/StepProgressBar.js","views/admin/FlowCreateCTDT/component/InputSelection.js","views/admin/FlowCreateCTDT/component/TablesInputSelection.js"],"names":["formField","label","i18n","t","name","id","placeholder","field","as","formSchema","Yup","shape","maCTDT","min","max","required","ten","loaiHinh","trinhDo","doiTuong","quiTrinhDaoTao","dieuKienTotNghiep","initialValues","CreateCTDT","props","useHistory","useState","data","checkExistsChuongTrinhDaoTao","a","chuongTrinhDaoTaoService","checkIsExist","results","isConflict","handleSubmit","formData","actions","toast","error","setState","next","className","enableReinitialize","validationSchema","onSubmit","values","errors","handleChange","touched","exists","map","item","index","FormGroup","Label","for","AsteriskIcon","value","onChange","style","color","Button","type","emptyNganhDaoTao","maNganhDaoTao","khoa","coHoiNgheNghiep","mucTieuChung","listMajor","CreateCTDT_Step2","setData","selectedRowIndex","setSelectedRowIndex","isOpenDeleteModel","setIsOpenDeleteModel","isOpenModal","setIsOpenModal","history","columns","React","useMemo","Header","accessor","width","isInputSelect","options","isValidate","bodyConfirmModal","ctdt","getState","ndt","body","payload","chuongTrinhDaoTaoApi","create_details","resp","isError","message","success","push","RoutesString","ADMIN_CHUONG_TRINH_DAO_TAO","onClick","cloneData","TablesInputSelection","updateMyData","rowIndex","columnId","newData","row","isPagination","handleSelectedRow","listSelectedRowId","converListSelectedRowId","Number","modal","toggle","headerTitle","bodyContent","handleOkButtonOnClick","handleCancelButtonOnClick","filter","includes","isModalDelete","Navigation","WrapperCreateCTDT","useSidebar","stateSideBar","actionSideBar","useEffect","isOpenSideBar","setIsOpenSideBar","config","navigation","component","location","order","Step01","description","display","justifyContent","margin","prev","disabled","current","size","ConfirmModal","titleOk","titleCancel","useTranslation","isOpen","validateOnlyNumber","text","test","transformData","subject","tenTiengViet","monHoc","idMH","removeItemOnce","arr","splice","checkExistInArray","array","chuanDauRa","children","isExist","EditableCell","initialValue","column","setValue","e","target","onBlur","Styles","styled","div","defaultColumn","Cell","Select","SelectableCell","DisableCell","DisableEditCell","TablesSelection","skipPageReset","tongSoTinChi","isFooterSum","useTable","usePagination","useRowState","useBlockLayout","useRowSelect","hooks","visibleColumns","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","rows","footerGroups","state","selectedRowIds","Object","keys","length","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","ComponentChild","isSelect","isDisable","getCellProps","padding","textAlign","marginLeft","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","background","memoize","fn","cache","arg","undefined","unitlessKeys","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","msGridRow","msGridRowSpan","msGridColumn","msGridColumnSpan","fontWeight","lineHeight","opacity","orphans","tabSize","widows","zIndex","zoom","WebkitLineClamp","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","StepsForm","maxWidth","steps","step","activeStepProps","activeStep","statusStep","Input","list","InputSelect"],"mappings":"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","file":"static/js/42.818469a2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { FormGroup, Label, Button } from \"reactstrap\";\r\nimport * as Yup from \"yup\";\r\nimport chuongTrinhDaoTaoService from \"api/common/chuong-trinh-dao-tao.api\";\r\nimport AsteriskIcon from \"components/common/AsteriskIcon/AsteriskIcon\";\r\nimport \"./CreateCTDT.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router\";\r\nimport { RoutesString } from \"pages/routesString\";\r\nimport i18n from \"i18n/i18n\";\r\n\r\nconst formField = [\r\n    {\r\n        label: i18n.t(\"PROGRAM_CODE\"),\r\n        name: \"maCTDT\",\r\n        id: \"maCTDT\",\r\n        placeholder: \"\",\r\n        field: \"maCTDT\",\r\n    },\r\n    {\r\n        label: i18n.t(\"TYPE_EDUCATION\"),\r\n        name: \"loaiHinh\",\r\n        id: \"loaiHinh\",\r\n        placeholder: \"\",\r\n        field: \"loaiHinh\",\r\n    },\r\n    {\r\n        label: i18n.t(\"PROGRAM_NAME\"),\r\n        name: \"ten\",\r\n        id: \"ten\",\r\n        placeholder: \"\",\r\n        field: \"ten\",\r\n    },\r\n    {\r\n        label: i18n.t(\"UNIVERSITY_DEGREE\"),\r\n        name: \"trinhDo\",\r\n        id: \"trinhDo\",\r\n        placeholder: \"\",\r\n        field: \"trinhDo\",\r\n    },\r\n    // {\r\n    //     label: i18n.t(\"TOTAL_CREDIT\"),\r\n    //     name: \"tongTinChi\",\r\n    //     id: \"tongTinChi\",\r\n    //     placeholder: \"\",\r\n    //     field: \"tongTinChi\",\r\n    // },\r\n    {\r\n        label: i18n.t(\"AUDIENCE\"),\r\n        name: \"doiTuong\",\r\n        id: \"doiTuong\",\r\n        placeholder: \"\",\r\n        field: \"doiTuong\",\r\n    },\r\n    {\r\n        label: i18n.t(\"TRAINING_PROCESS\"),\r\n        name: \"quiTrinhDaoTao\",\r\n        id: \"quiTrinhDaoTao\",\r\n        placeholder: \"\",\r\n        field: \"quiTrinhDaoTao\",\r\n        as: \"textarea\",\r\n    },\r\n    {\r\n        label: i18n.t(\"GRADUATION_CONDITIONS\"),\r\n        name: \"dieuKienTotNghiep\",\r\n        id: \"dieuKienTotNghiep\",\r\n        placeholder: \"\",\r\n        field: \"dieuKienTotNghiep\",\r\n        as: \"textarea\",\r\n    },\r\n];\r\n\r\nconst formSchema = Yup.object().shape({\r\n    maCTDT: Yup.string()\r\n        .min(2, i18n.t(\"TOO_SHORT\"))\r\n        .max(10, i18n.t(\"TOO_LONG\"))\r\n        .required(i18n.t(\"REQUIRED\")),\r\n    ten: Yup.string()\r\n        .min(5, i18n.t(\"TOO_SHORT\"))\r\n        .max(50, i18n.t(\"TOO_LONG\"))\r\n        .required(i18n.t(\"REQUIRED\")),\r\n    loaiHinh: Yup.string()\r\n        .min(5, i18n.t(\"TOO_SHORT\"))\r\n        .max(50, i18n.t(\"TOO_LONG\"))\r\n        .required(i18n.t(\"REQUIRED\")),\r\n    trinhDo: Yup.string().required(i18n.t(\"REQUIRED\")),\r\n    // tongTinChi: Yup.number()\r\n    //     .typeError(i18n.t(\"MUST_BE_NUMBER\"))\r\n    //     .required(i18n.t(\"REQUIRED\")),\r\n    doiTuong: Yup.string().required(i18n.t(\"REQUIRED\")),\r\n    quiTrinhDaoTao: Yup.string().required(i18n.t(\"REQUIRED\")),\r\n    dieuKienTotNghiep: Yup.string().required(i18n.t(\"REQUIRED\")),\r\n});\r\n\r\nconst initialValues = {\r\n    maCTDT: \"\",\r\n    loaiHinh: \"\",\r\n    ten: \"\",\r\n    trinhDo: \"\",\r\n    // tongTinChi: 0,\r\n    doiTuong: \"\",\r\n    quiTrinhDaoTao: \"\",\r\n    dieuKienTotNghiep: \"\",\r\n};\r\n\r\nconst CreateCTDT = (props) => {\r\n    const history = useHistory();\r\n    const [data, setData] = useState(initialValues);\r\n\r\n    const checkExistsChuongTrinhDaoTao = async ({ ten, maCTDT }) => {\r\n        try {\r\n            const results = await chuongTrinhDaoTaoService.checkIsExist({\r\n                maCTDT,\r\n                ten,\r\n            });\r\n            const { isConflict } = results;\r\n            if (isConflict) {\r\n                return results;\r\n            }\r\n            return false;\r\n        } catch (error) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (formData, actions) => {\r\n        const { ten = \"\", maCTDT = \"\" } = formData;\r\n        const isExists = await checkExistsChuongTrinhDaoTao({ ten, maCTDT });\r\n        if (isExists) {\r\n            toast.error(i18n.t(`FLOW_CREATE_CTDT_DETAIL.CHUONGTRINHDAOTAO_NAME_OR_CODE_EXIST`));\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // let { tongTinChi } = formData;\r\n            // if (typeof tongTinChi !== \"number\") {\r\n            //     tongTinChi = Number(tongTinChi);\r\n            // }\r\n            props.setState(\"ctdt\", {\r\n                ...formData,\r\n                // tongTinChi\r\n            })\r\n            // toast.success(i18n.t('FLOW_CREATE_CTDT_DETAIL.SUBMIT_SUCCESS'));\r\n            props.next();\r\n            // await chuongTrinhDaoTaoService.create({\r\n            //     ...formData,\r\n            //     tongTinChi,\r\n            // });\r\n            // history.push(RoutesString.ADMIN_CHUONG_TRINH_DAO_TAO);\r\n        } catch (error) {\r\n            toast.error(i18n.t(\"FAILED\"));\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"basic_info_container\">\r\n            <Formik\r\n                initialValues={data}\r\n                enableReinitialize={true}\r\n                validationSchema={formSchema}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {({ values, errors, handleChange, touched }) => (\r\n                    <Form>\r\n                        {errors?.exists ? (\r\n                            <div className=\"error_message\">\r\n                                {errors?.exists}\r\n                            </div>\r\n                        ) : null}\r\n                        {formField.map((item, index) => (\r\n                            <FormGroup\r\n                                className=\"basicinfo_row\"\r\n                                key={`basicinfo_row-${index}`}\r\n                            >\r\n                                <div className=\"basicinfo_content\">\r\n                                    <Label\r\n                                        for={item.id}\r\n                                        className=\"basicinfo_label\"\r\n                                    >\r\n                                        {item.label}\r\n                                        {\" \"}<AsteriskIcon />\r\n                                    </Label>\r\n                                    <Field\r\n                                        as={item.as || \"input\"}\r\n                                        name={item.name}\r\n                                        id={item.id}\r\n                                        placeholder={item.placeholder}\r\n                                        value={values[item.field]}\r\n                                        onChange={handleChange}\r\n                                        className=\"basicinfo_input\"\r\n                                    />\r\n                                </div>\r\n                                {errors[item.field] && touched[item.field] ? (\r\n                                    <div\r\n                                        className=\"error_message\"\r\n                                        style={{\r\n                                            color: \"#D8000C\",\r\n                                        }}\r\n                                    >\r\n                                        {errors[item.field]}\r\n                                    </div>\r\n                                ) : null}\r\n                            </FormGroup>\r\n                        ))}\r\n                        <div className=\"basicinfo_row\">\r\n                            <Button type=\"submit\">{i18n.t(\"SUBMIT\")}</Button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateCTDT;\r\n","import React, { useEffect, useState } from 'react';\r\nimport TablesSelection from \"views/admin/FlowCreateCTDT/component/TablesSelection\";\r\nimport Styles from \"views/admin/FlowCreateCTDT/component/styled\";\r\nimport { Button } from 'reactstrap';\r\nimport i18n from 'i18n/i18n';\r\nimport ConfirmSubmit from \"components/admin/ConfirmModal/ConfirmModal\";\r\nimport { toast } from 'react-toastify';\r\nimport chuongTrinhDaoTaoApi from 'api/common/chuong-trinh-dao-tao.api';\r\nimport { RoutesString } from 'pages/routesString';\r\nimport { useHistory } from 'react-router';\r\nimport TablesInputSelection from '../FlowCreateCTDT/component/TablesInputSelection';\r\n\r\nconst emptyNganhDaoTao = {\r\n    maNganhDaoTao: null,\r\n    ten: null,\r\n    khoa: null,\r\n    coHoiNgheNghiep: null,\r\n    mucTieuChung: null\r\n}\r\n\r\nconst listMajor = [\r\n    {\r\n        label: \"Hệ thống thông tin\",\r\n        value: \"Hệ thống thông tin\"\r\n    },\r\n    {\r\n        label: \"Kỹ thuật phần mềm\",\r\n        value: \"Kỹ thuật phần mềm\"\r\n    },\r\n    {\r\n        label: \"Khoa học máy tính\",\r\n        value: \"Khoa học máy tính\"\r\n    },\r\n    {\r\n        label: \"Công nghệ thông tin\",\r\n        value: \"Công nghệ thông tin\"\r\n    }\r\n]\r\n\r\nconst CreateCTDT_Step2 = (props) => {\r\n    const [data, setData] = useState([]);\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState([]);\r\n    const [isOpenDeleteModel, setIsOpenDeleteModel] = useState(false);\r\n    const [isOpenModal, setIsOpenModal] = useState(false);\r\n    const history = useHistory();\r\n\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: `Mã ngành`,\r\n                accessor: \"maNganhDaoTao\",\r\n                width: 200,\r\n            },\r\n            {\r\n                Header: `Tên ngành`,\r\n                accessor: \"ten\",\r\n                width: 300,\r\n                isInputSelect: true,\r\n                options: listMajor\r\n            },\r\n            {\r\n                Header: `Khóa tuyển`,\r\n                accessor: \"khoa\",\r\n                width: 200,\r\n                isValidate: true,\r\n            },\r\n        ],\r\n        []\r\n    );\r\n\r\n    const updateMyData = (rowIndex, columnId, value) => {\r\n        const newData = data.map((row, index) => {\r\n            if (index === rowIndex) {\r\n                return {\r\n                    ...data[rowIndex],\r\n                    [columnId]: value || \"\",\r\n                };\r\n            }\r\n            return row;\r\n        });\r\n\r\n        setData(newData);\r\n    };\r\n\r\n    const openConfirmDelete = () => {\r\n        setIsOpenDeleteModel(true);\r\n    };\r\n\r\n    //* open modal confirm submit\r\n    const openConfirmSubmit = () => {\r\n        setIsOpenModal(true);\r\n    };\r\n\r\n    const deleteRows = () => {\r\n        const newData = data.filter((row, index) => {\r\n            if (selectedRowIndex.includes(index)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        setData(newData);\r\n        setIsOpenDeleteModel(false);\r\n    };\r\n\r\n    const handleSelectedRow = (listSelectedRowId) => {\r\n        const converListSelectedRowId = listSelectedRowId.map((id) =>\r\n            Number(id)\r\n        );\r\n        setSelectedRowIndex(converListSelectedRowId);\r\n    };\r\n\r\n    const addNewRow = () => {\r\n        const cloneData = [...data];\r\n        cloneData.push({ ...emptyNganhDaoTao });\r\n        setData(cloneData);\r\n    };\r\n\r\n    const bodyConfirmModal = () => {\r\n        return <p>{i18n.t('FLOW_CREATE_CTDT_DETAIL.MODAL_CONFIRM_CONTENT')}</p>;\r\n    };\r\n\r\n    //* call API to create new data\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const ctdt = props.getState('ctdt');\r\n            if (!ctdt) {\r\n                toast.error(i18n.t(`FLOW_CREATE_CTDT_DETAIL.STEP_1.WARNING_INFO_FULL`));\r\n                return;\r\n            }\r\n            for (const ndt of data) {\r\n                if (!ndt.maNganhDaoTao || !ndt.ten) {\r\n                    toast.error(i18n.t(`FLOW_CREATE_CTDT_DETAIL.STEP_1.WARNING_INFO_FULL`));\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const body = {\r\n                ...ctdt,\r\n                payload: data\r\n            }\r\n            const resp = await chuongTrinhDaoTaoApi.create_details(body);\r\n            if (resp?.data?.isError) {\r\n                toast.error(i18n.t(`FLOW_CREATE_CTDT_DETAIL.${resp?.data?.message}`));\r\n                toast.error();\r\n                // setIsOpenModal(false);\r\n                return;\r\n            }\r\n            toast.success(i18n.t('FLOW_CREATE_CTDT_DETAIL.SUBMIT_SUCCESS'));\r\n            // setIsOpenModal(false);\r\n            history.push(RoutesString.ADMIN_CHUONG_TRINH_DAO_TAO);\r\n        } catch (error) {\r\n            toast.error(i18n.t('FLOW_CREATE_CTDT_DETAIL.SUBMIT_ERROR'));\r\n            return;\r\n        } finally {\r\n            setIsOpenModal(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Button onClick={openConfirmDelete} color=\"danger\">\r\n                    {i18n.t('FLOW_CREATE_CTDT_DETAIL.DELETE')}\r\n                </Button>\r\n                <Button\r\n                    onClick={addNewRow}\r\n                    color=\"info\"\r\n                    className=\"cautruc_btn add_new_row_btn ml-2\"\r\n                >\r\n                    {i18n.t('FLOW_CREATE_CTDT_DETAIL.ADD')}\r\n                </Button>\r\n\r\n                <Button\r\n                    className=\"cautruc_btn submit_btn ml-2\"\r\n                    onClick={openConfirmSubmit}\r\n                    color=\"success\"\r\n                >\r\n                    {i18n.t('FLOW_CREATE_CTDT_DETAIL.SAVE_&_SUBMIT')}\r\n                </Button>\r\n            </div>\r\n            <div>\r\n                <Styles>\r\n                    <TablesInputSelection\r\n                        columns={columns}\r\n                        data={data}\r\n                        updateMyData={updateMyData}\r\n                        isPagination={false}\r\n                        handleSelectedRow={handleSelectedRow}\r\n                    />\r\n                </Styles>\r\n            </div>\r\n\r\n            <ConfirmSubmit\r\n                modal={isOpenModal}\r\n                toggle={() => setIsOpenModal(!isOpenModal)}\r\n                headerTitle={\"\"}\r\n                bodyContent={bodyConfirmModal()}\r\n                handleOkButtonOnClick={handleSubmit}\r\n                handleCancelButtonOnClick={() => setIsOpenModal(!isOpenModal)}\r\n            />\r\n            <ConfirmSubmit\r\n                modal={isOpenDeleteModel}\r\n                toggle={() => setIsOpenDeleteModel(!isOpenDeleteModel)}\r\n                headerTitle={\"\"}\r\n                bodyContent={bodyConfirmModal()}\r\n                handleOkButtonOnClick={deleteRows}\r\n                handleCancelButtonOnClick={() =>\r\n                    setIsOpenDeleteModel(!isOpenDeleteModel)\r\n                }\r\n                isModalDelete={true}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCTDT_Step2;\r\n","import StepsForm from 'components/common/StepProgressBar/StepProgressBar';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Steps, Step } from \"react-step-builder\";\r\nimport { Button } from 'reactstrap';\r\nimport useSidebar from \"stores/common/SidebarStore/SidebarStore\";\r\nimport Step01 from './CreateCTDT';\r\nimport CreateCTDT_Step2 from './Step2';\r\n\r\nconst WrapperCreateCTDT = (props) => {\r\n    const [stateSideBar, actionSideBar] = useSidebar();\r\n\r\n    useEffect(() => {\r\n        if (stateSideBar?.isOpenSideBar) {\r\n            actionSideBar.setIsOpenSideBar({ isOpenSideBar: false });\r\n        }\r\n    }, []);\r\n\r\n    const config = {\r\n        navigation: {\r\n            component: Navigation,\r\n            location: \"before\",\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n           \r\n            <div>\r\n                <Steps config={config}>\r\n                    <div className=\"step_container\">\r\n                        <Step\r\n                            order={1}\r\n                            component={Step01}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"step_container\">\r\n                        <Step\r\n                            order={2}\r\n                            component={CreateCTDT_Step2}\r\n                        />\r\n                    </div>\r\n                </Steps>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default WrapperCreateCTDT;\r\n\r\nconst Navigation = (props) => {\r\n    const steps = React.useMemo(() => [\r\n        {\r\n            label: 'Chương trình đào tạo',\r\n            name: 'step1',\r\n            description: \"Tạo mới một chương trình đào tạo\",\r\n            order: 1\r\n        },\r\n        {\r\n            label: 'Ngành đào tạo',\r\n            name: 'step 2',\r\n            description: \"Tạo ngành đào tạo\",\r\n            order: 2\r\n        },\r\n        // {\r\n        //     label: 'Khóa tuyển',\r\n        //     name: 'step 3',\r\n        //     description: \"Tạo khóa tuyển cho từng ngành đào tạo\",\r\n        //     order: 3\r\n        // }\r\n    ], []);\r\n\r\n    return (\r\n      <div>\r\n           {/* <div>\r\n                <StepsForm steps={steps} activeStep={props?.current}/>\r\n            </div> */}\r\n            <div style={{display: 'flex', justifyContent: 'space-between', margin: '10px'}}>\r\n                <Button onClick={props.prev} disabled={props?.current === 1}>Previous</Button>\r\n                <Button onClick={props.next} disabled={props?.current === props.size}>Next</Button>\r\n            </div>\r\n      </div>\r\n    );\r\n  };","import React from \"react\";\n\nexport default function AsteriskIcon() {\n  return <span style={{ color: \"red\" }}>(*)</span>;\n}\n","import React from \"react\";\r\nimport { Button, Modal, ModalFooter, ModalHeader, ModalBody, Input } from \"reactstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default function ConfirmModal({\r\n    modal,\r\n    toggle,\r\n    headerTitle,\r\n    bodyContent,\r\n    handleOkButtonOnClick,\r\n    handleCancelButtonOnClick,\r\n    isModalDelete = false,\r\n    titleOk = \"\",\r\n    titleCancel = \"\",\r\n}) {\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>{headerTitle}</ModalHeader>\r\n            <ModalBody>{bodyContent}</ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    color={`${isModalDelete ? \"danger\" : \"primary\"}`}\r\n                    onClick={handleOkButtonOnClick}\r\n                >\r\n                    {t(titleOk || \"admin.common.OK\")}\r\n                </Button>\r\n                <Button color=\"warning\" onClick={handleCancelButtonOnClick}>\r\n                    {t(titleCancel || \"admin.common.CANCEL\")}\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n}\r\n\r\n\r\nexport function InputModal({\r\n    modal,\r\n    toggle,\r\n    headerTitle,\r\n    handleOkButtonOnClick,\r\n    handleCancelButtonOnClick,\r\n    isModalDelete = false,\r\n    titleOk = \"\",\r\n    titleCancel = \"\",\r\n}) {\r\n    const { t } = useTranslation();\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>{headerTitle}</ModalHeader>\r\n            <ModalBody>\r\n                <Input value={text} onChange={e => setText(e?.target?.value)}/>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    color={`${isModalDelete ? \"danger\" : \"primary\"}`}\r\n                    onClick={() => handleOkButtonOnClick(text)}\r\n                >\r\n                    {t(titleOk || \"admin.common.OK\")}\r\n                </Button>\r\n                <Button color=\"warning\" onClick={handleCancelButtonOnClick}>\r\n                    {t(titleCancel || \"admin.common.CANCEL\")}\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n}","export const updateMyData = (rowIndex, columnId, value) => {\r\n    // We also turn on the flag to not reset the page\r\n    setSkipPageReset(true);\r\n    setData((old) =>\r\n        old.map((row, index) => {\r\n            if (index === rowIndex) {\r\n                return {\r\n                    ...old[rowIndex],\r\n                    [columnId]: value,\r\n                };\r\n            }\r\n            return row;\r\n        })\r\n    );\r\n};\r\nexport const validateOnlyNumber = (text) => {\r\n    const regex = /^[0-9]*$/g;\r\n    return regex.test(text);\r\n};\r\n\r\nexport const convertToGroup = (data = [], groupTypes, groupField) => {\r\n    const results = [];\r\n    for (const type of groupTypes) {\r\n        const subjectsType = data.filter(\r\n            (item) =>\r\n                String(item[groupField]).toUpperCase() ===\r\n                String(type).toUpperCase()\r\n        );\r\n        results.push({ type, subjects: [...subjectsType] });\r\n    }\r\n    // console.log(`results`, results);\r\n    return results;\r\n};\r\n\r\nexport const transformData = (data) => {\r\n    return data.map((subject) => {\r\n        return {\r\n            label: subject.tenTiengViet,\r\n            value: subject.id,\r\n            data: { monHoc: subject, idMH: subject.id },\r\n        };\r\n    });\r\n};\r\n\r\nexport function removeItemOnce(arr, index) {\r\n    var value = arr[index];\r\n    if (value) {\r\n        arr.splice(index, 1);\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport async function checkExistInArray (array, value) {\r\n    for(let item of array){\r\n        if(item?.chuanDauRa?.id === value){\r\n          return true;\r\n        }\r\n        \r\n        if(item?.children){\r\n            const isExist = await checkExistInArray(item.children, value);\r\n            if(isExist) {\r\n                return isExist;\r\n            }\r\n        }\r\n      \r\n    }\r\n    return false;\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Input } from \"reactstrap\";\r\nimport { validateOnlyNumber } from \"../utils\";\r\n\r\nconst EditableCell = ({\r\n    value: initialValue,\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData, // This is a custom function that we supplied to our table instance\r\n    isValidate = false,\r\n}) => {\r\n    // We need to keep and update the state of the cell normally\r\n    const [value, setValue] = React.useState(initialValue);\r\n\r\n    const onChange = (e) => {\r\n        const { value } = e.target;\r\n        if (!isValidate) {\r\n            setValue(value);\r\n        }\r\n        if (validateOnlyNumber(value)) {\r\n            setValue(value);\r\n        }\r\n    };\r\n\r\n    const onBlur = () => {\r\n        updateMyData(index, id, value);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        setValue(initialValue);\r\n    }, [initialValue]);\r\n\r\n    return <Input value={value} onChange={onChange} onBlur={onBlur} />;\r\n};\r\n\r\nexport default EditableCell;\r\n","import styled from \"styled-components\";\r\nconst Styles = styled.div`\r\n    .table {\r\n        display: inline-block;\r\n        border-spacing: 0;\r\n        border: 1px solid black;\r\n        width: fit-content;\r\n        margin-top: 10px;\r\n        .tr {\r\n            :last-child {\r\n                .td {\r\n                    border-bottom: 0 !important;\r\n                }\r\n            }\r\n        }\r\n        .th {\r\n            font-weight: 700;\r\n        }\r\n        .th,\r\n        .td {\r\n            margin: 0;\r\n            padding: 0.5rem;\r\n            border-bottom: 1px solid black;\r\n            border-right: 1px solid black;\r\n\r\n            :last-child {\r\n                border-right: 0;\r\n            }\r\n\r\n            input {\r\n                font-size: 1rem;\r\n                padding: 0;\r\n                margin: 0;\r\n                border: 0;\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n\r\n    .pagination {\r\n        padding: 0.5rem;\r\n    }\r\n`;\r\nexport default Styles;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useTable,\r\n    usePagination,\r\n    useRowState,\r\n    useBlockLayout,\r\n    useRowSelect,\r\n} from \"react-table\";\r\n\r\nimport EditableCell from \"./EditableCell\";\r\nimport SelectableCell from \"./SelectableCell\";\r\nimport IndeterminateCheckbox from \"./IndeterminateCheckbox\";\r\nimport i18n from \"i18n/i18n\";\r\nimport DisableEditCell from \"./DisableEditCell\";\r\n\r\nconst defaultColumn = {\r\n    Cell: EditableCell,\r\n    Select: SelectableCell,\r\n    DisableCell: DisableEditCell,\r\n    width: 50,\r\n};\r\n\r\nfunction TablesSelection({\r\n    columns,\r\n    data,\r\n    updateMyData,\r\n    skipPageReset,\r\n    isPagination,\r\n    handleSelectedRow,\r\n    tongSoTinChi = 0,\r\n    isFooterSum = false\r\n}) {\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        footerGroups,\r\n        rows,\r\n        state: { selectedRowIds, ...rest },\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            updateMyData,\r\n        },\r\n        usePagination,\r\n        useRowState,\r\n        useBlockLayout,\r\n        useRowSelect,\r\n        (hooks) => {\r\n            hooks.visibleColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => (\r\n                        <div>\r\n                            <IndeterminateCheckbox\r\n                                {...getToggleAllRowsSelectedProps()}\r\n                            />\r\n                        </div>\r\n                    ),\r\n                    Cell: ({ row }) => (\r\n                        <div>\r\n                            <IndeterminateCheckbox\r\n                                {...row.getToggleRowSelectedProps()}\r\n                            />\r\n                        </div>\r\n                    ),\r\n                },\r\n                ...columns,\r\n            ]);\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        handleSelectedRow(Object.keys(selectedRowIds));\r\n    }, [Object.keys(selectedRowIds).length]);\r\n\r\n    return (\r\n        <>\r\n            <div {...getTableProps()} className=\"table\">\r\n                <div>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <div\r\n                            {...headerGroup.getHeaderGroupProps()}\r\n                            className=\"tr\"\r\n                        >\r\n                            {headerGroup.headers.map((column) => (\r\n                                <div\r\n                                    {...column.getHeaderProps()}\r\n                                    className=\"th\"\r\n                                >\r\n                                    {column.render(\"Header\")}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div {...getTableBodyProps()}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <div {...row.getRowProps()} className=\"tr\">\r\n                                {row.cells.map((cell) => {\r\n                                    let ComponentChild = () =>\r\n                                        cell.render(\"Cell\");\r\n                                    if (cell?.column?.disabled) {\r\n                                        ComponentChild = () =>\r\n                                            cell.render(() => (\r\n                                                <input\r\n                                                    disabled\r\n                                                    value={cell?.value}\r\n                                                />\r\n                                            ));\r\n                                    } else if (cell?.column?.isSelect) {\r\n                                        ComponentChild = () =>\r\n                                            cell.render(\"Select\", {\r\n                                                options: cell?.column?.options,\r\n                                                value: cell?.value,\r\n                                            });\r\n                                    } else if (cell?.column?.isValidate) {\r\n                                        ComponentChild = () =>\r\n                                            cell.render(\"Cell\", {\r\n                                                isValidate: true,\r\n                                            });\r\n                                    }\r\n                                    else if (cell?.column?.isDisable) {\r\n                                        ComponentChild = () =>\r\n                                            cell.render(\"DisableCell\");\r\n                                    }\r\n                                    return (\r\n                                        <div\r\n                                            {...cell.getCellProps()}\r\n                                            className=\"td\"\r\n                                        >\r\n                                            <ComponentChild />\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {isFooterSum && <div style={{ display: \"flex\", padding: \"5px 0\" }}>\r\n                        <div style={{ width: \"700px\", textAlign: \"right\" }}>\r\n                            {i18n.t('FLOW_CREATE_CTDT_DETAIL.CAU_TRUC_CHUONG_TRINH.TABLE_HEADERS.CREDIT_TOTAL')}\r\n                        </div>\r\n                        <div style={{ marginLeft: \"20px\" }}>{tongSoTinChi}</div>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n            {/* <p>Selected Rows: {Object.keys(selectedRowIds).length}</p>\r\n            <pre>\r\n                <code>\r\n                    {JSON.stringify(\r\n                        {\r\n                            selectedRowIds: selectedRowIds,\r\n                        },\r\n                        null,\r\n                        2\r\n                    )}\r\n                </code>\r\n            </pre> */}\r\n            {/* {isPagination ? (\r\n                <div className=\"pagination\">\r\n                    <button\r\n                        onClick={() => gotoPage(0)}\r\n                        disabled={!canPreviousPage}\r\n                    >\r\n                        {\"<<\"}\r\n                    </button>{\" \"}\r\n                    <button\r\n                        onClick={() => previousPage()}\r\n                        disabled={!canPreviousPage}\r\n                    >\r\n                        {\"<\"}\r\n                    </button>{\" \"}\r\n                    <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n                        {\">\"}\r\n                    </button>{\" \"}\r\n                    <button\r\n                        onClick={() => gotoPage(pageCount - 1)}\r\n                        disabled={!canNextPage}\r\n                    >\r\n                        {\">>\"}\r\n                    </button>{\" \"}\r\n                    <span>\r\n                        Page{\" \"}\r\n                        <strong>\r\n                            {pageIndex + 1} of {pageOptions.length}\r\n                        </strong>{\" \"}\r\n                    </span>\r\n                    <span>\r\n                        | Go to page:{\" \"}\r\n                        <input\r\n                            type=\"number\"\r\n                            defaultValue={pageIndex + 1}\r\n                            onChange={(e) => {\r\n                                const page = e.target.value\r\n                                    ? Number(e.target.value) - 1\r\n                                    : 0;\r\n                                gotoPage(page);\r\n                            }}\r\n                            style={{ width: \"100px\" }}\r\n                        />\r\n                    </span>{\" \"}\r\n                    <select\r\n                        value={pageSize}\r\n                        onChange={(e) => {\r\n                            setPageSize(Number(e.target.value));\r\n                        }}\r\n                    >\r\n                        {[10, 20, 30, 40, 50].map((pageSize) => (\r\n                            <option key={pageSize} value={pageSize}>\r\n                                Show {pageSize}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            ) : (\r\n                \"\"\r\n            )} */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TablesSelection;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Input } from \"reactstrap\";\r\n\r\nconst SelectableCell = ({\r\n    value: initialValue,\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData,\r\n    options = [],\r\n}) => {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    const onChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const onBlur = () => {\r\n        updateMyData(index, id, value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setValue(initialValue);\r\n    }, [initialValue]);\r\n\r\n    return (\r\n        <Input\r\n            type=\"select\"\r\n            value={value}\r\n            onChange={onChange}\r\n            onBlur={onBlur}\r\n            style={{ padding: \".375rem .2rem\" }}\r\n        >\r\n            {options.map((item) => (\r\n                <option key={item?.value} value={item?.value}>\r\n                    {item?.label}\r\n                </option>\r\n            ))}\r\n        </Input>\r\n    );\r\n};\r\n\r\nexport default SelectableCell;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n        const defaultRef = React.useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n\r\n        React.useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n\r\n        return (\r\n            <>\r\n                <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n            </>\r\n        );\r\n    }\r\n);\r\n\r\nexport default IndeterminateCheckbox;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Input } from \"reactstrap\";\r\nimport { validateOnlyNumber } from \"../utils\";\r\n\r\nconst DisableEditCell = ({\r\n    value: initialValue,\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData, // This is a custom function that we supplied to our table instance\r\n    isValidate = false,\r\n}) => {\r\n    // We need to keep and update the state of the cell normally\r\n    const [value, setValue] = React.useState(initialValue);\r\n\r\n    React.useEffect(() => {\r\n        setValue(initialValue);\r\n    }, [initialValue]);\r\n\r\n    return <Input disabled={true} value={value} style={{background: \"snow\"}}/>;\r\n};\r\n\r\nexport default DisableEditCell;\r\n","function memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\nexport default memoize;\n","var unitlessKeys = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\nexport default unitlessKeys;\n","import React from 'react';\r\n\r\nimport './StepProgressBar.css';\r\n\r\nconst StepsForm = (props) => {\r\n    \r\n    return (\r\n        <div className=\"container\" style={{maxWidth: '100%'}}>\r\n            <div className=\"multisteps-form\">\r\n                <div className=\"row\">\r\n                    <div className=\"col ml-auto mr-auto mb-2 mt-2\">\r\n                        <div className=\"multisteps-form__progress\">\r\n                        {\r\n                            props?.steps && props?.steps?.map((step, index) => {\r\n                                const activeStepProps = props?.activeStep || 0;\r\n                                const statusStep = activeStepProps >= step?.order ? 'js-active' : activeStepProps === step?.order ? 'active' : '';\r\n\r\n                                return <div className={`multisteps-form__progress-btn ${statusStep}`} key={index}>\r\n                                    <div className=\"text-center step_label\">{step?.label || ''}</div>\r\n                            </div>\r\n                            })\r\n                        }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default StepsForm ;","import React, { useEffect, useState } from \"react\";\r\nimport { Input } from \"reactstrap\";\r\n\r\nconst SelectableCell = ({\r\n    value: initialValue,\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData,\r\n    options = [],\r\n}) => {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    const onChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const onBlur = () => {\r\n        updateMyData(index, id, value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setValue(initialValue);\r\n    }, [initialValue]);\r\n\r\n    return (\r\n        <>\r\n        <Input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n            onBlur={onBlur}\r\n            style={{ padding: \".375rem .2rem\" }}\r\n            list={`row-${index}-column${id}`}\r\n        />\r\n        <datalist id={`row-${index}-column${id}`}>\r\n            {options.map((item) => (\r\n                <option key={item?.value} value={item?.value}>\r\n                        {item?.label}\r\n                </option>\r\n            ))}\r\n        </datalist>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SelectableCell;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useTable,\r\n    usePagination,\r\n    useRowState,\r\n    useBlockLayout,\r\n    useRowSelect,\r\n} from \"react-table\";\r\n\r\nimport EditableCell from \"./EditableCell\";\r\nimport SelectableCell from \"./SelectableCell\";\r\nimport InputSelect from './InputSelection';\r\nimport IndeterminateCheckbox from \"./IndeterminateCheckbox\";\r\nimport i18n from \"i18n/i18n\";\r\n\r\nconst defaultColumn = {\r\n    Cell: EditableCell,\r\n    Select: SelectableCell,\r\n    InputSelect: InputSelect,\r\n    width: 50,\r\n};\r\n\r\nfunction TablesInputSelection({\r\n    columns,\r\n    data,\r\n    updateMyData,\r\n    skipPageReset,\r\n    isPagination,\r\n    handleSelectedRow,\r\n    tongSoTinChi = 0,\r\n    isFooterSum = false\r\n}) {\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        footerGroups,\r\n        rows,\r\n        state: { selectedRowIds, ...rest },\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            updateMyData,\r\n        },\r\n        usePagination,\r\n        useRowState,\r\n        useBlockLayout,\r\n        useRowSelect,\r\n        (hooks) => {\r\n            hooks.visibleColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => (\r\n                        <div>\r\n                            <IndeterminateCheckbox\r\n                                {...getToggleAllRowsSelectedProps()}\r\n                            />\r\n                        </div>\r\n                    ),\r\n                    Cell: ({ row }) => (\r\n                        <div>\r\n                            <IndeterminateCheckbox\r\n                                {...row.getToggleRowSelectedProps()}\r\n                            />\r\n                        </div>\r\n                    ),\r\n                },\r\n                ...columns,\r\n            ]);\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        handleSelectedRow(Object.keys(selectedRowIds));\r\n    }, [Object.keys(selectedRowIds).length]);\r\n\r\n    return (\r\n        <>\r\n            <div {...getTableProps()} className=\"table\">\r\n                <div>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <div\r\n                            {...headerGroup.getHeaderGroupProps()}\r\n                            className=\"tr\"\r\n                        >\r\n                            {headerGroup.headers.map((column) => (\r\n                                <div\r\n                                    {...column.getHeaderProps()}\r\n                                    className=\"th\"\r\n                                >\r\n                                    {column.render(\"Header\")}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div {...getTableBodyProps()}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <div {...row.getRowProps()} className=\"tr\">\r\n                                {row.cells.map((cell) => {\r\n                                    let ComponentChild = () =>\r\n                                        cell.render(\"Cell\");\r\n                                    if (cell?.column?.disabled) {\r\n                                        ComponentChild = () =>\r\n                                            cell.render(() => (\r\n                                                <input\r\n                                                    disabled\r\n                                                    value={cell?.value}\r\n                                                />\r\n                                            ));\r\n                                    } else if (cell?.column?.isSelect) {\r\n                                        ComponentChild = () =>\r\n                                            cell.render(\"Select\", {\r\n                                                options: cell?.column?.options,\r\n                                                value: cell?.value,\r\n                                            });\r\n                                    } else if (cell?.column?.isValidate) {\r\n                                        ComponentChild = () =>\r\n                                            cell.render(\"Cell\", {\r\n                                                isValidate: true,\r\n                                            });\r\n                                    }\r\n                                    else if (cell?.column?.isInputSelect) {\r\n                                        ComponentChild = () =>\r\n                                            cell.render(\"InputSelect\", {\r\n                                                options: cell?.column?.options,\r\n                                                value: cell?.value,\r\n                                            });\r\n                                    }\r\n                                    return (\r\n                                        <div\r\n                                            {...cell.getCellProps()}\r\n                                            className=\"td\"\r\n                                        >\r\n                                            <ComponentChild />\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {isFooterSum && <div style={{ display: \"flex\", padding: \"5px 0\" }}>\r\n                        <div style={{ width: \"700px\", textAlign: \"right\" }}>\r\n                            {i18n.t('FLOW_CREATE_CTDT_DETAIL.CAU_TRUC_CHUONG_TRINH.TABLE_HEADERS.CREDIT_TOTAL')}\r\n                        </div>\r\n                        <div style={{ marginLeft: \"20px\" }}>{tongSoTinChi}</div>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n            {/* <p>Selected Rows: {Object.keys(selectedRowIds).length}</p>\r\n            <pre>\r\n                <code>\r\n                    {JSON.stringify(\r\n                        {\r\n                            selectedRowIds: selectedRowIds,\r\n                        },\r\n                        null,\r\n                        2\r\n                    )}\r\n                </code>\r\n            </pre> */}\r\n            {/* {isPagination ? (\r\n                <div className=\"pagination\">\r\n                    <button\r\n                        onClick={() => gotoPage(0)}\r\n                        disabled={!canPreviousPage}\r\n                    >\r\n                        {\"<<\"}\r\n                    </button>{\" \"}\r\n                    <button\r\n                        onClick={() => previousPage()}\r\n                        disabled={!canPreviousPage}\r\n                    >\r\n                        {\"<\"}\r\n                    </button>{\" \"}\r\n                    <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n                        {\">\"}\r\n                    </button>{\" \"}\r\n                    <button\r\n                        onClick={() => gotoPage(pageCount - 1)}\r\n                        disabled={!canNextPage}\r\n                    >\r\n                        {\">>\"}\r\n                    </button>{\" \"}\r\n                    <span>\r\n                        Page{\" \"}\r\n                        <strong>\r\n                            {pageIndex + 1} of {pageOptions.length}\r\n                        </strong>{\" \"}\r\n                    </span>\r\n                    <span>\r\n                        | Go to page:{\" \"}\r\n                        <input\r\n                            type=\"number\"\r\n                            defaultValue={pageIndex + 1}\r\n                            onChange={(e) => {\r\n                                const page = e.target.value\r\n                                    ? Number(e.target.value) - 1\r\n                                    : 0;\r\n                                gotoPage(page);\r\n                            }}\r\n                            style={{ width: \"100px\" }}\r\n                        />\r\n                    </span>{\" \"}\r\n                    <select\r\n                        value={pageSize}\r\n                        onChange={(e) => {\r\n                            setPageSize(Number(e.target.value));\r\n                        }}\r\n                    >\r\n                        {[10, 20, 30, 40, 50].map((pageSize) => (\r\n                            <option key={pageSize} value={pageSize}>\r\n                                Show {pageSize}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            ) : (\r\n                \"\"\r\n            )} */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TablesInputSelection;\r\n"],"sourceRoot":""}