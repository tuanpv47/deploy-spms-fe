{"version":3,"sources":["components/Editor/CustomEditor.js","views/admin/ChiTietNganhDaoTao/htmlMode/htmlMode.js","api/common/export.api.js","components/ViewModeHtml/ViewModeHtml.js"],"names":["opts","indent_size","indent_char","max_preserve_newlines","preserve_newlines","keep_array_indentation","break_chained_methods","indent_scripts","brace_style","space_before_conditional","unescape_strings","jslint_happy","end_with_newline","wrap_line_length","indent_inner_html","comma_first","CustomEditor","value","onEditorChange","window","html_beautify","mode","theme","onChange","name","width","ViewHtmlMode","props","params","useParams","useSidebar","stateSideBar","actionSideBar","useState","htmlString","setHtmlString","isLoading","setIsLoading","isProcessing","setIsProcessing","createPdf","a","nganhDaoTao","id","khoa","url","CONFIG","API","EXPORT_PDF","fileName","axios","method","responseType","data","then","response","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","useEffect","exportAPI","getAll","result","toast","error","i18n","t","isOpenSideBar","setIsOpenSideBar","LoadingBar","Loading","className","Button","onClick","style","position","split","defaultSize","newValue","filter","query","queryString","stringify","axiosClient","get","post","getJSON","exportPdfFromJSON","ViewModeHtml","ReactHtmlParser"],"mappings":"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","file":"static/js/78.8d8cf514.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport AceEditor from \"react-ace-builds\";\r\n\r\nconst opts = {\r\n    indent_size: \"2\",\r\n    indent_char: \" \",\r\n    max_preserve_newlines: \"5\",\r\n    preserve_newlines: true,\r\n    keep_array_indentation: false,\r\n    break_chained_methods: false,\r\n    indent_scripts: \"normal\",\r\n    brace_style: \"collapse\",\r\n    space_before_conditional: true,\r\n    unescape_strings: false,\r\n    jslint_happy: false,\r\n    end_with_newline: false,\r\n    wrap_line_length: \"0\",\r\n    indent_inner_html: false,\r\n    comma_first: false,\r\n};\r\n\r\nconst CustomEditor = ({ value, onEditorChange }) => {\r\n    return (\r\n        <div>\r\n            <AceEditor\r\n                value={window.html_beautify(value, opts)}\r\n                mode=\"html\"\r\n                theme=\"tomorrow\"\r\n                onChange={onEditorChange}\r\n                name=\"custom_editor\"\r\n                width=\"100%\"\r\n            />\r\n            ,\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomEditor;\r\n","import CustomEditor from \"components/Editor/CustomEditor\";\r\nimport ModeHtml from \"components/ViewModeHtml/ViewModeHtml\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport { toast } from \"react-toastify\";\r\nimport exportAPI from \"api/common/export.api\";\r\nimport CONFIG from \"config/config\";\r\nimport useSidebar from \"stores/common/SidebarStore/SidebarStore\";\r\nimport axios from \"axios\";\r\nimport { Button } from \"reactstrap\";\r\nimport Loading from \"components/common/loading/Loading\";\r\n\r\nimport \"./htmlMode.css\";\r\nimport LoadingBar from \"components/common/LoadingBar/LoadingBar\";\r\nimport i18n from \"i18n/i18n\";\r\n\r\nconst ViewHtmlMode = (props) => {\r\n    const params = useParams();\r\n    const [stateSideBar, actionSideBar] = useSidebar();\r\n    const [htmlString, setHtmlString] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const onEditorChange = (newValue) => {\r\n        setHtmlString(newValue);\r\n    };\r\n\r\n    const createPdf = async () => {\r\n        setIsProcessing(true);\r\n        const { id: nganhDaoTao, khoa } = params;\r\n        const url = `${CONFIG.API.EXPORT_PDF}/data`;\r\n        const fileName = `N-${nganhDaoTao}_K${khoa}`;\r\n        axios({\r\n            url,\r\n            method: \"POST\",\r\n            responseType: \"blob\", // important\r\n            data: {\r\n                data: htmlString,\r\n                fileName,\r\n            },\r\n        }).then((response) => {\r\n            const url = window.URL.createObjectURL(new Blob([response.data]));\r\n            const link = document.createElement(\"a\");\r\n            link.href = url;\r\n            link.setAttribute(\"download\", `${fileName}.pdf`);\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            setIsProcessing(false);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setIsLoading(true);\r\n            if (params.id && params.khoa) {\r\n                const { id: nganhDaoTao, khoa } = params;\r\n                const result = await exportAPI.getAll({ nganhDaoTao, khoa });\r\n                setHtmlString(result?.data || \"\");\r\n            } else {\r\n                toast.error(i18n.t(\"ERROR\"));\r\n            }\r\n            if (stateSideBar?.isOpenSideBar) {\r\n                actionSideBar.setIsOpenSideBar({ isOpenSideBar: false });\r\n            }\r\n            setIsLoading(false);\r\n        })();\r\n    }, [params.id, params.khoa]);\r\n\r\n    return (\r\n        <>\r\n            {isProcessing && <LoadingBar />}\r\n            {isLoading ? (\r\n                <Loading />\r\n            ) : (\r\n                <div className=\"html_mode_container\">\r\n                    <div>\r\n                        <Button onClick={createPdf}>Download</Button>\r\n                    </div>\r\n                    <SplitPane\r\n                        style={{ position: \"relative\" }}\r\n                        split=\"vertical\"\r\n                        defaultSize=\"50%\"\r\n                    >\r\n                        <div className=\"view\">\r\n                            <CustomEditor\r\n                                value={htmlString}\r\n                                onEditorChange={onEditorChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"view preview_html\">\r\n                            <ModeHtml value={htmlString} />\r\n                        </div>\r\n                    </SplitPane>\r\n                    <div></div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewHtmlMode;\r\n","import axiosClient from \"api/common/axiosClient\";\r\nimport CONFIG from \"config/config\";\r\nimport i18n from \"i18n/i18n\";\r\nimport queryString from \"query-string\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport default {\r\n    getAll: async function (filter) {\r\n        const query = queryString.stringify({ ...filter });\r\n        try {\r\n            const url = `${CONFIG.API.EXPORT_PDF}/data?${query}`;\r\n            return await axiosClient.get(url);\r\n        } catch (error) {\r\n            toast.error(i18n.t(\"ERROR\"));\r\n        }\r\n    },\r\n    createPdf: async (data) => {\r\n        try {\r\n            const url = `${CONFIG.API.EXPORT_PDF}/data`;\r\n            return await axiosClient.post(url, { data });\r\n        } catch (error) {\r\n            toast.error(i18n.t(\"ERROR\"));\r\n        }\r\n    },\r\n    getJSON: async function (filter) {\r\n        const query = queryString.stringify({ ...filter });\r\n        try {\r\n            const url = `${CONFIG.API.EXPORT_PDF}/json?${query}`;\r\n            return await axiosClient.get(url);\r\n        } catch (error) {\r\n            toast.error(i18n.t(\"ERROR\"));\r\n        }\r\n    },\r\n    exportPdfFromJSON: async (data, opts = {}) => {\r\n        try {\r\n            const url = `${CONFIG.API.EXPORT_PDF}/json/pdf`;\r\n            return await axiosClient.post(url, data, { ...opts });\r\n        } catch (error) {\r\n            toast.error(i18n.t(\"ERROR\"));\r\n        }\r\n    },\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nconst ViewModeHtml = (props) => {\r\n    return <div>{ReactHtmlParser(props.value)}</div>;\r\n};\r\n\r\nexport default ViewModeHtml;\r\n"],"sourceRoot":""}